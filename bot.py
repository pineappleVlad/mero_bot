from config import TOKEN
import telebot
from telebot import types
from telegram_bot_calendar import DetailedTelegramCalendar
from config import TOKEN
from datetime import datetime
import locale
import os, sys
from requests.exceptions import ConnectionError, ReadTimeout



# conn = psycopg2.connect(dbname=DB_NAME, user=DB_LOGIN, password=DB_PASSWORD)
# cursor = conn.cursor()
locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')
bot = telebot.TeleBot(TOKEN)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users_db = {}
cities = ["–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ú–æ—Å–∫–≤–∞", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥"]
buttons = ['–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', '–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ']
channel_ids_long = {'–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫': '-1002010810169', '–ú–æ—Å–∫–≤–∞': '-1002115842002', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': '-1002028710164', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥': '-1002144192009'}
channel_ids_short = {'–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫': '-1002120433604', '–ú–æ—Å–∫–≤–∞': '-1002106897762', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': '-1002008160160', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥': '-1001856471244'}


base_headings = {'–ë–∏–∑–Ω–µ—Å': '#biz ',
            '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è': '#Psy ',
            '–≠–∑–æ—Ç–µ—Ä–∏—á–µ—Å–∫–∏–µ': '#magic ',
            '–ú—É–∂—Å–∫–∏–µ': '#–º—É–∂—Å–∫–∏–µ ',
            '–ñ–µ–Ω—Å–∫–∏–µ': '#–∂–µ–Ω—Å–∫–∏–µ ',
            '–î–µ—Ç—Å–∫–∏–µ(—Å –¥–µ—Ç—å–º–∏)': '#–¥–µ—Ç—Å–∫–∏–µ ',
            '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ/—Ç—Ä–µ–Ω–∏–Ω–≥–∏/–æ–±—É—á–µ–Ω–∏–µ': '#–æ–±—É—á–µ–Ω–∏–µ ',
            '–ö—É–ª—å—Ç—É—Ä–∞ –∏ –∏—Å–∫—É—Å—Å—Ç–≤–æ': '#–∫—É–ª—å—Ç—É—Ä–∞ ',
            '–ú—É–∑—ã–∫–∞–ª—å–Ω–æ-—Ç–∞–Ω—Ü–µ–≤–∞–ª—å–Ω—ã–µ': '#–º—É–∑ ',
            '–ó–¥–æ—Ä–æ–≤—å–µ –∏ —Å–ø–æ—Ä—Ç': '#–∑–¥–æ—Ä–æ–≤—å–µ ',
            '–ù–∞—Å—Ç–æ–ª–∫–∏ –∏ –¥—Ä—É–∂–µ—Å–∫–∏–µ –≤—Å—Ç—Ä–µ—á–∏': '#games ',
            '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ': '#freeüíö '}


biz_hashtags =  ['#networking', '#gameBiz', '#forum', '#marketing', '#sale', '#—Ç—Ä–µ–Ω–∏–Ω–≥', '#manBiz', '#wonanBiz', '#–ò–òbiz']

# def create_db(chat_id, username, city):
#     cursor.execute("CREATE TABLE IF NOT EXISTS users (id SERIAL PRIMARY KEY, chat_id BIGINT UNIQUE, username VARCHAR UNIQUE, city VARCHAR)")
#     conn.commit()
#
#     insert_query = """
#         INSERT INTO users (chat_id, username, city)
#         VALUES (%s, %s, %s)
#         ON CONFLICT (username)
#         DO UPDATE SET
#             chat_id = EXCLUDED.chat_id,
#             username = EXCLUDED.username,
#             city = EXCLUDED.city;
#     """
#     cursor.execute(insert_query, (chat_id, username, city))
#     conn.commit()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def handle_start(message):
    chat_id = message.chat.id

    if chat_id in users_db and 'current_message' in users_db[chat_id]:
        try:
            bot.edit_message_reply_markup(chat_id, users_db[chat_id]['current_message'])
        except Exception as e:
            pass

    city_buttons = types.InlineKeyboardMarkup()
    for city in cities:
        btn = types.InlineKeyboardButton(city, callback_data=city)
        city_buttons.add(btn)


    sent_message = bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π. –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º! –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥:\n",
                     reply_markup=city_buttons)
    users_db[chat_id] = {}
    users_db[chat_id]['current_message'] = sent_message.message_id

    try:
        user = message.from_user
        username = user.username
        users_db[chat_id]['username'] = username
    except KeyError:
        handle_cancel(message)
        return


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
@bot.callback_query_handler(func=lambda call: call.data in cities)
def handle_city_choice(call):
    if call.data:
        try:
            chat_id = call.message.chat.id
            users_db[chat_id]['city'] = call.data
        except KeyError:
            handle_cancel(call.message)
            return

        # create_db(chat_id, users_db[chat_id]['username'], users_db[chat_id]['city'])

        bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.message_id, reply_markup=None)
        bot.send_message(chat_id, f"–¢—ã –≤—ã–±—Ä–∞–ª –≥–æ—Ä–æ–¥ {call.data}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Ç–µ–º—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n \n"
                              f'(–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel\n',
                    )

        bot.register_next_step_handler(call.message, handle_topic_input)
    else:
        bot.send_message(call.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥')
        bot.register_next_step_handler(call, handle_city_choice)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–º—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
def handle_topic_input(message):
    if message.text:
        if message.text[0] != '/':
            try:
                chat_id = message.chat.id
                users_db[chat_id]['topic'] = message.text
            except KeyError:
                handle_cancel(message)
                return

            bot.send_message(chat_id, f"–¢–µ–º–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {message.text}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤):\n \n"
                                  f'(–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel\n',
                         )
            bot.register_next_step_handler(message, handle_event_name_input)
        elif message.text == '/cancel':
            handle_cancel(message)
    else:
        bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥')
        bot.register_next_step_handler(message, handle_topic_input)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
def handle_event_name_input(message):
    if message.text:
        if len(message.text) > 200:
            bot.send_message(message.chat.id, '–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
            bot.register_next_step_handler(message, handle_event_name_input)
        else:
            if message.text[0] != '/':
                try:
                    chat_id = message.chat.id
                    users_db[chat_id]['event_name'] = message.text
                except KeyError:
                    handle_cancel(message)
                    return

                bot.send_message(chat_id, f"–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {message.text}. \n–¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞:\n \n"
                                          f'(–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel\n',
                                )
                bot.register_next_step_handler(message, handle_event_image_input)
            elif message.text == '/cancel':
                handle_cancel(message)
    else:
        bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥')
        bot.register_next_step_handler(message, handle_event_name_input)

#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ—Å—Ç–∞
def handle_event_image_input(message):
    if message.text:
        if message.text == '/cancel':
            handle_cancel(message)
        else:
            bot.send_message(message.chat.id, '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n \n'
                                              f'(–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel\n',
                             )
            bot.register_next_step_handler(message, handle_event_image_input)
    elif message.photo:
        try:
            chat_id = message.chat.id
            users_db[chat_id]['image'] = message.photo[-1].file_id
            send_current_state(chat_id, 'user')
        except KeyError:
            handle_cancel(message)
            return

        calendar, step = DetailedTelegramCalendar().build()
        sent_message = bot.send_message(message.chat.id,
                         f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É",
                         reply_markup=calendar)
        users_db[chat_id]['current_message'] = sent_message.message_id
    else:
        bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥')
        bot.register_next_step_handler(message, handle_event_image_input)


#–û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –î–ê–¢–´
@bot.callback_query_handler(func=DetailedTelegramCalendar.func())
def cal(c):
    if c.data:
        result, key, step = DetailedTelegramCalendar().process(c.data)
        if not result and key:
            bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É",
                                  c.message.chat.id,
                                  c.message.message_id,
                                  reply_markup=key)
        elif result:
            bot.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {result}",
                                  c.message.chat.id,
                                  c.message.message_id)
            try:
                users_db[c.message.chat.id]['date'] = result
            except KeyError:
                handle_cancel(c)
                bot.send_message(c.message.chat.id, f'–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ /start')
                return
            send_current_state(chat_id=c.message.chat.id, source='user')


            bot.send_message(c.message.chat.id, f'–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n'
                                              f'–ü—Ä–∏–º–µ—Ä—ã: \n'
                                              f'14:00 - 18:00\n'
                                              f'14:00 –¥–æ 18:00\n \n'
                                              f'(–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel\n',
                         )
            bot.register_next_step_handler(c.message, handle_event_time_input)
    else:
        bot.send_message(c.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥')
        bot.register_next_step_handler(c, cal)


#–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏
def handle_event_time_input(message):
    if message.text:
        if message.text == '/cancel':
            handle_cancel(message)
        try:
            users_db[message.chat.id]['time'] = message.text
        except KeyError:
            handle_cancel(message)
            return
        send_current_state(chat_id=message.chat.id, source='user')
        bot.send_message(message.chat.id, f'–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏\n \n'
                                          f'(–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel\n',
                         )
        bot.register_next_step_handler(message, handle_event_people_count)
    else:
        bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥')
        bot.register_next_step_handler(message, handle_event_time_input)


#–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª-–≤–∞ –ª—é–¥–µ–π
def handle_event_people_count(message):
    # number_pattern = re.compile(r'^\d+$')
    if message.text:
        if message.text == '/cancel':
            handle_cancel(message)
        else:
            # if number_pattern.match(message.text):
            try:
                users_db[message.chat.id]['people_count'] = message.text
                try:
                    people = int(message.text)
                    if people > 50:
                        users_db[message.chat.id]['hashtags'] = '#BiG '
                except ValueError:
                    pass
                send_current_state(chat_id=message.chat.id, source='user')
            except KeyError:
                handle_cancel(message)
                return

            skip_button = types.KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            keyboard.add(skip_button)

            bot.send_message(message.chat.id, f'–í–≤–µ–¥–∏—Ç–µ –æ—Ñ—Ñ–µ—Ä (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):', reply_markup=keyboard)
            bot.register_next_step_handler(message, handle_event_offer)

            # else:
            # bot.send_message(message.chat.id,
            #                 f'–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –ª—é–¥–µ–π –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø–æ–¥–ø–∏—Å–µ–π (–ù–∞–ø—Ä–∏–º–µ—Ä: 300)')
            # bot.register_next_step_handler(message, handle_event_people_count)
    else:
        bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥')
        bot.register_next_step_handler(message, handle_event_people_count)



#–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ—Ñ—Ñ–µ—Ä–∞
def handle_event_offer(message):
    if message.text:
        if message.text[0] != '/':
            chat_id = message.chat.id
            try:
                if message.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
                    users_db[chat_id]['offer'] = 'skip'
                else:
                    users_db[chat_id]['offer'] = message.text
            except KeyError:
                handle_cancel(message)
                return

            remove_keyboard = types.ReplyKeyboardRemove()
            bot.send_message(chat_id, f'–û—Ñ—Ñ–µ—Ä: {message.text}', reply_markup=remove_keyboard)


            headings_buttons = types.InlineKeyboardMarkup()
            for heading in base_headings.keys():
                btn = types.InlineKeyboardButton(heading, callback_data=heading)
                headings_buttons.add(btn)

            send_current_state(message.chat.id, 'user')
            sent_message = bot.send_message(chat_id, f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä—É–±—Ä–∏–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", reply_markup=headings_buttons)
            users_db[chat_id]['current_message'] = sent_message.message_id
        elif message.text == '/cancel':
            handle_cancel(message)
    else:
        bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥')
        bot.register_next_step_handler(message, handle_event_offer)




#–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É–±—Ä–∏–∫–∏
@bot.callback_query_handler(func=lambda call: call.data in base_headings.keys())
def handle_event_heading(call):
    if call.data:
        if call.data == '/cancel':
            handle_cancel(call)
        else:
            try:
                chat_id = call.message.chat.id
                users_db[chat_id]['heading'] = call.data
            except KeyError:
                handle_cancel(call.message)
                return

            bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.message_id, reply_markup=None)

            modified_hashtags = ['`' + hashtag + '`' for hashtag in biz_hashtags]
            reccomend_biz_hashtag = '\n'.join(modified_hashtags)



            if call.data == '–ë–∏–∑–Ω–µ—Å':
                bot.send_message(chat_id, f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä—É–±—Ä–∏–∫—É: {call.data}\n \n'
                                          f'–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ö—ç—à—Ç–µ–≥–∏ \n'
                                          f"–í–≤–µ–¥–∏—Ç–µ —Ö—ç—à—Ç–µ–≥–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–∑–∞–ø—è—Ç—ã–µ –º–µ–∂–¥—É —Ö—ç—à—Ç–µ–≥–∞–º–∏ —Å—Ç–∞–≤–∏—Ç—å –Ω–µ –Ω—É–∂–Ω–æ)\n \n"
                                          f'–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ö—ç—à—Ç–µ–≥–∏ –≤ —Ä—É–±—Ä–∏–∫–µ {call.data}:\n'
                                          f'{reccomend_biz_hashtag}\n \n'
                                          f'–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ö—ç—à—Ç–µ–≥, –ø—Ä–æ—Å—Ç–æ —Ç–∞–ø–Ω–∏—Ç–µ –ø–æ –Ω–µ–º—É. \n'
                                          f'–°—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –≤ —Ä—É–±—Ä–∏–∫–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º —Ö—ç—à—Ç–µ–≥? –ù–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω—É –æ–± —ç—Ç–æ–º \n'
                             , parse_mode='Markdown')
            else:
                bot.send_message(chat_id, f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä—É–±—Ä–∏–∫—É: {call.data}\n \n'
                                          f"–í–≤–µ–¥–∏—Ç–µ —Ö—ç—à—Ç–µ–≥–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–∑–∞–ø—è—Ç—ã–µ –º–µ–∂–¥—É —Ö—ç—à—Ç–µ–≥–∞–º–∏ —Å—Ç–∞–≤–∏—Ç—å –Ω–µ –Ω—É–∂–Ω–æ)\n \n"
                                 )
            bot.register_next_step_handler(call.message, handle_hashtags)
    else:
        bot.send_message(call.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥')
        bot.register_next_step_handler(call, handle_event_heading)

#–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ö—ç—à—Ç–µ–≥–æ–≤
def handle_hashtags(message):
    if message.text:
        if message.text == '/cancel':
            handle_cancel(message)
        else:
            if message.text[0] == "#":
                try:
                    chat_id = message.chat.id

                    if 'heading' in users_db[chat_id]:
                        base_hash = base_headings[users_db[chat_id]['heading']]
                    else:
                        base_hash = ''


                    if 'hashtags' in users_db:
                        users_db[chat_id]['hashtags'] += base_hash
                    else:
                        users_db[chat_id]['hashtags'] = base_hash

                    if 'data_hashtag' in users_db[chat_id]:
                        date_hash = users_db[chat_id]['data_hashtag']
                        base_date_hash = base_hash[:-1] + '_' + date_hash[1:4] + date_hash[-2] + date_hash[-1] + ' '
                        users_db[chat_id]['hashtags'] += base_date_hash

                    for hashtag in message.text.split(' '):
                        if 'data_hashtag' in users_db[chat_id]:
                            date_hash = users_db[chat_id]['data_hashtag']
                            extra_date_hash = hashtag + '_' + date_hash[1:4] + date_hash[-2] + date_hash[-1] + ' '
                            users_db[chat_id]['hashtags'] += extra_date_hash
                        else:
                            users_db[chat_id]['hashtags'] += hashtag

                except KeyError:
                    handle_cancel(message)
                    return
                send_current_state(chat_id, 'user')
                bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–º–∞–∫—Å–∏–º—É–º 600 —Å–∏–º–≤–æ–ª–æ–≤) \n')
                bot.register_next_step_handler(message, handle_description)
            else:
                bot.send_message(message.chat.id, f'–í–≤–µ–¥–∏—Ç–µ —Ö—ç—à—Ç–µ–≥–∏ —Å —Ä–µ—à–µ—Ç–∫–æ–π:\n'
                                                  f'–ü—Ä–∏–º–µ—Ä: #biz #Psy #magic'
                                 )
                bot.register_next_step_handler(message, handle_hashtags)
    else:
        bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥')
        bot.register_next_step_handler(message, handle_hashtags)

#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
def handle_description(message):
    if message.text:
        if len(message.text) > 600:
            bot.send_message(message.chat.id, '–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
            bot.register_next_step_handler(message, handle_description)
        else:
            if message.text == '/cancel':
                handle_cancel(message)
            else:
                try:
                    chat_id = message.chat.id
                    users_db[chat_id]['description'] = message.text
                except KeyError:
                    handle_cancel(message)
                    return
                send_current_state(chat_id, 'user')
                bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è \n')
                bot.register_next_step_handler(message, handle_address)
    else:
        bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥')
        bot.register_next_step_handler(message, handle_description)


#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞
def handle_address(message):
    if message.text:
        if message.text == '/cancel':
            handle_cancel(message)
        else:
            try:
                chat_id = message.chat.id
                users_db[chat_id]['address'] = message.text
            except KeyError:
                handle_cancel(message)
                return
            send_current_state(chat_id, 'user')
            bot.send_message(chat_id, '–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è \n')
            bot.register_next_step_handler(message, handle_price)
    else:
        bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥')
        bot.register_next_step_handler(message, handle_address)

#–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
def handle_price(message):
    if message.text:
        if message.text == '/cancel':
            handle_cancel(message)
        else:
            try:
                chat_id = message.chat.id
                users_db[chat_id]['price'] = message.text
            except KeyError:
                handle_cancel(message)
                return
            send_current_state(chat_id, 'user')
            bot.send_message(chat_id, '–£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –±–∏–ª–µ—Ç–æ–≤,  '
                                      '—ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–∞–π—Ç, –ª–∏–¥ —Ñ–æ—Ä–º–∞, –ª–∏—á–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¢–ì. '
                                      '–í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∞—Ç—Å–∞–ø —á–∞—Ç—ã, '
                                      '—Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª—ã –∏ —á–∞—Ç—ã (—ç—Ç–æ —Ä–µ–∫–ª–∞–º–∞) \n')
            bot.register_next_step_handler(message, handle_url)
    else:
        bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥')
        bot.register_next_step_handler(message, handle_price)

#–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏
def handle_url(message):
    if message.text:
        if message.text == '/cancel':
            handle_cancel(message)
        else:
            try:
                chat_id = message.chat.id
                users_db[chat_id]['url'] = message.text
            except KeyError:
                handle_cancel(message)
                return
            all_correct(chat_id)
    else:
        bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥')
        bot.register_next_step_handler(message, handle_url)

def all_correct(chat_id):
    res = send_current_state(chat_id, 'user')
    if res == 'Error':
        return


    keyboard = types.InlineKeyboardMarkup()
    for button in buttons:
        btn = types.InlineKeyboardButton(button, callback_data=button)
        keyboard.add(btn)

    sent_message = bot.send_message(chat_id, '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –≤—Å—ë –ª–∏ –≤–µ—Ä–Ω–æ?', reply_markup=keyboard)
    users_db[chat_id]['current_message'] = sent_message.message_id


@bot.callback_query_handler(func=lambda call: call.data in buttons)
def result_correct(call):
    if call.data:
        try:
            chat_id = call.message.chat.id
            users_db[chat_id]['result'] = call.data
        except KeyError:
            handle_cancel(call.message)
            return


        bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.message_id, reply_markup=None)
        if call.data == '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å':
            send_channel_result(chat_id)
            bot.send_message(chat_id, f'–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
            bot.send_message(chat_id, f'–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start')
        elif call.data == '–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ':
            handle_cancel(call.message)
            bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ')

    else:
        bot.send_message(call.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥')
        bot.register_next_step_handler(call, result_correct)



# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
@bot.message_handler(commands=['cancel'])
def handle_cancel(message):
    chat_id = message.chat.id


    if chat_id in users_db:
        if 'current_message' in users_db[chat_id]:
            try:
                bot.edit_message_reply_markup(chat_id=chat_id, message_id=users_db[chat_id]['current_message'],
                                              reply_markup=None)
            except telebot.apihelper.ApiTelegramException:
                pass
        del users_db[chat_id]

    bot.send_message(chat_id, "–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ. –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –Ω–∞–ø–∏—à–∏—Ç–µ /start")


# –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
def send_current_state(chat_id, source):
    if type(source) is list:
        user_id = list(users_db.keys())[0]
        user_data = users_db.get(user_id, {})
    else:
        user_data = users_db.get(chat_id, {})

    if 'date' in user_data:
        date_res_hash = datetime.strptime(str(user_data['date']), "%Y-%m-%d")
        output_date_hash = f"#{date_res_hash.strftime('%b_%d_%y').lower()}"
        users_db[list(users_db.keys())[0]]['data_hashtag'] = output_date_hash

        date_res = datetime.strptime(str(user_data['date']), "%Y-%m-%d")
        output_date = date_res.strftime("%d %B (%A)")
    else:
        output_date, output_date_hash = "", ""

    if 'offer' in user_data:
        if user_data['offer'] == 'skip':
            offer = ''
        else:
            offer = user_data['offer']
    else:
        offer = ''


    pattern = '\n'

    post_text = f'<strong>{user_data.get("topic", "")}</strong>\n' \
                f'¬´{user_data.get("event_name", "")}¬ª\n \n' \
                f'{user_data.get("description", "")} \n \n' \
                f'üóì{output_date}\n' \
                f'‚è∞{user_data.get("time", "")}\n' \
                f'üë•–ö–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {user_data.get("people_count", "")}\n' \
                f'üè¢–ú–µ—Å—Ç–æ: {user_data.get("address", "")} \n' \
                f'üí∏–¶–µ–Ω–∞: {user_data.get("price", "")} \n \n' \
                f'{offer}\n \n' \
                f'–†–∞–∑–º–µ—Å—Ç–∏–ª: @{user_data.get("username", "")} \n \n' \
                f'{user_data.get("hashtags", "").replace(pattern, " ").strip()} {output_date_hash}'

    post_text_short = f'<strong>{user_data.get("topic", "")}</strong>\n' \
                f'¬´{user_data.get("event_name", "")}¬ª\n \n' \
                f'üóì{output_date}\n' \
                f'‚è∞{user_data.get("time", "")}\n' \
                f'üë•–ö–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {user_data.get("people_count", "")}\n \n' \
                f'{offer}\n \n' \
                f'{user_data.get("hashtags", "").replace(pattern, " ").strip()} {output_date_hash}'

    url_button, inline_keyboard = None, None
    if 'url' in user_data:
        url_button = types.InlineKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", url=user_data['url'])
        inline_keyboard = types.InlineKeyboardMarkup().row(url_button) if url_button else None


    if len(post_text) <= 1024:
        try:
            if source == 'user':
                bot.send_message(chat_id, '–°–µ–π—á–∞—Å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:\n')
                bot.send_photo(chat_id, user_data.get('image', ''), caption=post_text, parse_mode='HTML', reply_markup=inline_keyboard)
            elif type(source) is list:
                if source[0] == 'channel':
                    if source[1] == 'long':
                        bot.send_photo(chat_id, user_data.get('image', ''), caption=post_text, parse_mode='HTML', reply_markup=inline_keyboard)
                    elif source[1] == 'short':
                        bot.send_photo(chat_id, user_data.get('image', ''), caption=post_text_short, parse_mode='HTML')
        except telebot.apihelper.ApiTelegramException as e:
            if source == 'user':
                bot.send_message(chat_id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞, —Å–æ–∑–¥–∞–π—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ, –Ω–∞–ø–∏—Å–∞–≤ –∫–æ–º–∞–Ω–¥—É /start')
                if chat_id in users_db:
                    del users_db[chat_id]
            return 'Error'
    else:
        bot.send_message(chat_id, '–û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º –∏ –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å, —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ\n'
                                  '–°–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ —Å–æ–∑–¥–∞–π—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start')
        if chat_id in users_db:
            del users_db[chat_id]




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–Ω–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def other_message_handle(message):
        bot.send_message(message.chat.id, f'–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start\n \n'
                                          f'–î–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω—ã–Ω–µ—à–Ω–µ–≥–æ, –Ω–∞–ø–∏—à–∏—Ç–µ /cancel'
                         )



def send_channel_result(chat_id):
    user_data = users_db.get(chat_id, {})
    id_long, id_short = None, None
    if 'city' in user_data:
        city = user_data['city']
        id_long = channel_ids_long[city]
        id_short = channel_ids_short[city]

    send_current_state(id_long, ['channel', 'long'])
    send_current_state(id_short, ['channel', 'short'])







# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    try:
        bot.infinity_polling(timeout=5, long_polling_timeout=10)
    except (ConnectionError, ReadTimeout) as e:
        sys.stdout.flush()
        os.execv(sys.argv[0], sys.argv)
    else:
        bot.infinity_polling(timeout=5, long_polling_timeout=10)


# conn.close()